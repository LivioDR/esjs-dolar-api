importar fs desde 'node:fs'
importar { plantilla } desde './plantilla.esjs'
importar { openapiAtributos } desde './openapiAtributos.esjs'

funcion loadJSON(path) {
  retornar JSON.analizar(fs.readFileSync(crear URL(path, import.meta.url)));
}

const baseSpec = {
  openapi: '3.0.0',
  servers: [
    {
      url: 'https://dolarapi.com',
      description: 'ProducciÃ³n',
    },
  ],
  paths: {},
}

exportar funcion init() {
  const openapi = Object.assign({}, baseSpec)

  const exchanges = JSON.parse(fs.readFileSync('datos/v1/exchanges/index.json'))
  openapi.paths['/v1/exchanges'] = {
    get: {
      summary: 'Listado de exchanges',
      operationId: 'get-exchanges',
      description: 'Listado de exchanges.',
      tags: ['Exchanges'],
      responses: {
        200: {
          description: 'Listado de exchanges',
          content: {
            'application/json': {
              schema: {
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    id: {
                      type: 'string',
                      enum: exchanges.map(({ id }) => id),
                    },
                    nombre: {
                      type: 'string',
                    },
                    logo: {
                      type: 'string',
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  }

  const monedasBase = fs.readdirSync('datos/v1/exchanges/monedas')

  para (const monedaBase de monedasBase) {
    const monedas = fs.readdirSync(`datos/v1/exchanges/monedas/${monedaBase}`)

    para (const moneda de monedas) {
      const json = JSON.parse(fs.readFileSync(
        `datos/v1/exchanges/monedas/${monedaBase}/${moneda}/index.json`,
      ))

      // obtener valores unicos de la propiedad `exchange`
      const exchanges = json.mapear(({ exchange }) => exchange)
        .filtrar((valor, indice, arreglo) => arreglo.indiceDe(valor) === indice)
        .map((exchange) => exchange)

      openapi.paths[`/v1/exchanges/monedas/${monedaBase}/${moneda}`] = {
        get: {
          summary: `${monedaBase.aMayusculas()}/${moneda.aMayusculas()}`,
          operationId: `get-exchange-moneda-${monedaBase.aMinusculas()}-${moneda.aMinusculas()}`,
          description: `Cotizaciones de ${monedaBase.aMayusculas()} a ${moneda.aMayusculas()}.`,
          tags: [`${monedaBase.aMayusculas()}`],
          responses: {
            200: {
              description: 'Cotizaciones',
              content: {
                'application/json': {
                  schema: {
                    type: 'array',
                    items: {
                      type: 'object',
                      properties: {
                        exchange: {
                          type: 'string',
                          enum: exchanges,
                        },
                        compra: {
                          type: 'number',
                        },
                        venta: {
                          type: 'number',
                        },
                        moneda: {
                          type: 'string',
                          enum: [`${moneda.aMayusculas()}`],
                        },
                        monedaBase: {
                          type: 'string',
                          enum: [`${monedaBase.aMayusculas()}`],
                        },
                        criptomoneda: {
                          type: 'string',
                        },
                        fechaActualizacion: {
                          type: 'string',
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      }
    }
  }

  consola.escribir(openapi)

  fs.mkdirSync('docs/public/exchanges', { recursive: verdadero })

  fs.writeFileSync(
    `docs/public/exchanges/openapi.json`,
    JSON.aTexto(openapi, nulo, 2),
  )
}

intentar {
  init()
} capturar (error) {
  consola.error(error)
}
