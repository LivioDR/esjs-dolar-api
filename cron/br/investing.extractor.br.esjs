importar axios desde 'axios'
importar cheerio desde 'cheerio'
importar { chromium } desde 'playwright'
importar { monedas } desde '@/br/constantes.br.esjs'
importar tryToCatch desde 'try-to-catch'
importar { grupo, logError } desde '@/log.esjs'

exportar porDefecto asincrono funcion () {
  const cotizaciones = []

  para (const moneda de monedas.filtrar((moneda) => moneda.codigo !== 'BRL')) {
    const log = grupo({
      cron: 'cron.br.esjs',
      extractor: 'investing.extractor.br.esjs',
      moneda: moneda.codigo,
    })

    si (moneda.codigo === 'USD') {
      const [error, cotizacion] = esperar tryToCatch(extraerUsdBrl)

      si (error) {
        logError(log, error, {
          response: error.response.data,
        })
      } sino {
        cotizaciones.agregar(cotizacion)
      }
    } sino {
      const [error, cotizacion] = esperar tryToCatch(extraerCotizacion, moneda)

      si (error) {
        logError(log, error, {
          response: error.response.data,
        })
      } sino {
        cotizaciones.agregar(cotizacion)
      }
    }
  }

  retornar cotizaciones
}

funcion obtenerRespuesta(moneda) {
  const monedaEnMinusculas = moneda.codigo.aMinusculas()
  const url = `https://es.investing.com/currencies/${monedaEnMinusculas}-brl`

  retornar axios.get(url)
}

asincrono funcion extraerCotizacion(moneda) {
  const response = esperar obtenerRespuesta(moneda)

  const $ = cheerio.load(response.data)

  const cotizacion = {
    moeda: moneda.codigo.aMayusculas(),
    nome: moneda.nombre,
    compra: interpretarValorMonetario($('dd[data-test=bid]').text()),
    venda: interpretarValorMonetario($('dd[data-test=ask]').text()),
    fechoAnterior: interpretarValorMonetario(
      $('dd[data-test=prevClose]').text(),
    ),
    dataAtualizacao: interpretarFecha(
      $('time[data-test=trading-time-label]').attr('datetime'),
    ),
  }

  retornar cotizacion
}

funcion interpretarValorMonetario(valor) {
  retornar Numero.interpretarDecimal(valor.reemplazar(',', '.'));
}

funcion interpretarFecha(fecha) {
  intentar {
    retornar crear Fecha(fecha).aCadenaISO();
  } capturar (error) {
    retornar fecha
  }
}

asincrono funcion extraerUsdBrl() {
  const browser = esperar chromium.launch()
  const context = esperar browser.newContext({
    userAgent:
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',
  })
  const page = esperar context.newPage()

  intentar {
    esperar page.goto('https://es.investing.com/currencies/usd-brl', {
      waitUntil: 'domcontentloaded',
    })

    esperar page.waitForSelector('dd[data-test=bid]')

    const compra = esperar page.$eval('dd[data-test=bid]', (el) => el.textContent)
    const venta = esperar page.$eval('dd[data-test=ask]', (el) => el.textContent)
    const fechoAnterior = esperar page.$eval(
      'dd[data-test=prevClose]',
      (el) => el.textContent,
    )

    retornar {
      moeda: 'USD',
      nome: 'DÃ³lar',
      compra: interpretarValorMonetario(compra),
      venda: interpretarValorMonetario(venta),
      fechoAnterior: interpretarValorMonetario(fechoAnterior),
      dataAtualizacao: crear Fecha().aCadenaISO(),
    };
  } finalmente {
    esperar browser.close()
  }
}
